package dcs

import (
	"log"

	common_config "github.com/abhisek/supply-chain-gateway/services/pkg/common/config"
	common_models "github.com/abhisek/supply-chain-gateway/services/pkg/common/models"
	"github.com/abhisek/supply-chain-gateway/services/pkg/common/openssf"
)

const (
	vulnCollectorGroupName = "vuln-collector-group"
	vulnCollectorName      = "Vulnerability Data Collector"
)

type vulnCollector struct {
	config     *common_config.Config
	osvAdapter *openssf.OsvServiceAdapter
}

func vulnCollectorSubscription(config *common_config.Config) eventSubscription[common_models.Artefact] {
	osvAdapter := openssf.NewOsvServiceAdapter(openssf.DefaultServiceAdapterConfig())

	h := vulnCollector{config: config, osvAdapter: osvAdapter}
	return h.subscription()
}

func (v *vulnCollector) subscription() eventSubscription[common_models.Artefact] {
	return eventSubscription[common_models.Artefact]{
		name:    vulnCollectorName,
		group:   vulnCollectorGroupName,
		topic:   v.config.Global.TapService.Publisher.TopicMappings["upstream_request"],
		handler: v.handler(),
	}
}

func (v *vulnCollector) handler() eventSubscriptionHandler[common_models.Artefact] {
	return func(event common_models.DomainEvent[common_models.Artefact]) error {
		return v.handle(event)
	}
}

func (v *vulnCollector) handle(event common_models.DomainEvent[common_models.Artefact]) error {
	log.Printf("Vulnerability collector - Handling artefact: %v", event.Data)

	vulnerabilities, err := v.osvAdapter.QueryPackage(event.Data.OpenSsfEcosystem(), event.Data.OpenSsfPackageName())
	if err != nil {
		log.Printf("Failed to fetch vulnerability from OSV adapter: %v", err)
		return err
	}

	log.Printf("Fetched %d vulnerabilities for %s/%s", len(*vulnerabilities.Vulns),
		event.Data.OpenSsfEcosystem(), event.Data.OpenSsfPackageName())

	return nil
}
